#!/usr/bin/env python

# ln -s ../../pre-commit .git/hooks
# pre-commit hook to check nvchecker.ini and repo tree

import os
import sys
import re
from subprocess import Popen, PIPE
from unittest import TestCase, TestSuite, TestLoader, TextTestRunner, skip
from io import TextIOWrapper, StringIO
from configparser import ConfigParser

DIRS, FILES = None, None
GIT_BRANCH = 'HEAD'
SUBFOLDER = 'archlinuxcn'


def readutf8(st):
    return st.read().decode('utf-8').strip()


def git_write_tree_index():
    global GIT_BRANCH
    cmd = ['git', 'write-tree']
    with Popen(cmd, stdout=PIPE) as p:
        GIT_BRANCH = readutf8(p.stdout)


def git_ls_tree():
    cmd = ['git', 'ls-tree', '-rtz', '--full-name', GIT_BRANCH]
    ## git ls-tree
    ## -r Recurse into sub-trees.
    ## -t Show tree entries even when going to recurse them.
    ## -z \0 line termination on output and do not quote filenames.
    dirs = []
    files = []
    with Popen(cmd, stdout=PIPE) as p:
        alllines = readutf8(p.stdout)
        for line in alllines.split('\0')[:-1]: # ignore last \0
            ## OUTPUT FORMAT
            ## <mode> SP <type> SP <object> TAB <file>
            first, _, path = line.partition('\t')
            _, t, _ = first.split(' ')
            if t == 'tree':
                dirs.append(path)
            elif t == 'blob':
                files.append(path)
        return dirs, files


def git_open(filename):
    cmd = ['git', 'cat-file', 'blob', f'{GIT_BRANCH}:{filename}']
    with Popen(cmd, stdout=PIPE) as p:
        return StringIO(readutf8(p.stdout))


def git_listdir(path):
    cmd = ['git', 'ls-tree', '--name-only',
           (f'{GIT_BRANCH}:{path}' if path != '.' else GIT_BRANCH)]
    with Popen(cmd, stdout=PIPE) as p:
        return readutf8(p.stdout).split("\n")


def git_isdir(path):
    global DIRS
    return path in DIRS


def git_isfile(path, name):
    global FILES
    return os.path.join(path, name) in FILES


def pkgpath(pkgname):
    if git_isdir(SUBFOLDER):
        return os.path.join(SUBFOLDER, pkgname)
    else:
        return pkgname

class NvcheckerSyntaxTest(TestCase):
    def test_nvchecker_ini(self):
        self.config = ConfigParser(dict_type=dict, allow_no_value=True)
        nvcheckerpath = 'nvchecker.ini'
        if git_isfile(SUBFOLDER, 'nvchecker.ini'):
            nvcheckerpath = f'{SUBFOLDER}/nvchecker.ini'
        with git_open(nvcheckerpath) as configfile:
            self.config.read_file(configfile)


class ConfigSectionTest(TestCase):
    def setUp(self):
        self.item_key_regex = re.compile('([_0-9a-zA-Z]+)')
        self.config = ConfigParser(dict_type=dict, allow_no_value=True)
        nvcheckerpath = 'nvchecker.ini'
        if git_isfile(SUBFOLDER, 'nvchecker.ini'):
            nvcheckerpath = f'{SUBFOLDER}/nvchecker.ini'
        with git_open(nvcheckerpath) as configfile:
            self.config.read_file(configfile)


    def test_config_section(self):
        self.assertIn("__config__", self.config,
                      msg='nvchecker.ini has no ' +
                          '""\033[1;31m__config__\033[m" section')
        self.assertIn("oldver", self.config["__config__"],
                      msg='"__config__" section has no ' +
                          '"\033[1;31moldver\033[m" setting')
        self.assertIn("newver", self.config["__config__"],
                      msg='"__config__" section has no ' +
                          '"\033[1;31mnewver\033[m" setting')

    def test_sections(self):
        for section in self.config.sections():
            if section == "__config__":
                continue
            with self.subTest(section=section):
                self.assertTrue(git_isdir(pkgpath(section)),
                                msg=('nvchecker.ini contains ' +
                                     '"\033[1;31m{0}\033[m" section but there is no ' +
                                     '"\033[1;31m{0}\033[m" package').format(section))
            with self.subTest(section=section):
                self.assertGreater(len(self.config[section].items()), 0,
                                   msg=('section "\033[1;31m{0}\033[m" ' +
                                        'is empty').format(section))
            for key, value in self.config[section].items():
                with self.subTest(section=section, key=key, value=value):
                    self.assertTrue(self.item_key_regex.match(key),
                                    msg=('nvchecker.ini section "\033[1;31m{0}\033[m" ' +
                                         'contains ill-formed key ' +
                                         '"\033[1;31m{1}\033[m"').format(section, key))

    @skip("226 packages violating this")
    def test_have_lilac_py(self):
        for section in self.config.sections():
            if "manual" not in self.config[section]:
                with self.subTest(section=section):
                    self.assertTrue(git_isfile(pkgpath(section), "lilac.py"),
                                    msg=('package "\033[1;31m{0}\033[m" does not ' +
                                         'have lilac.py').format(section))

    def test_folders(self):
        packagesfolder = SUBFOLDER
        if not git_isdir(packagesfolder):
            packagesfolder = '.'
        for package in git_listdir(packagesfolder):
            if not git_isdir(pkgpath(package)):
                continue
            if package[0] == '.':
                continue
            with self.subTest(package=package):
                self.assertTrue(git_isfile(pkgpath(package), "PKGBUILD"),
                                msg=('package "\033[1;31m{0}\033[m" does not ' +
                                     'have PKGBUILD').format(package))

    def test_lilac_py_has_nvchecker_config(self):
        packagesfolder = SUBFOLDER
        if not git_isdir(packagesfolder):
            packagesfolder = '.'
        for package in git_listdir(packagesfolder):
            if not git_isdir(pkgpath(package)):
                continue
            if package[0] == '.':
                continue
            if not git_isfile(pkgpath(package), 'lilac.py'):
                continue

            with self.subTest(package=package):
                self.assertIn(package, self.config,
                              msg=('package "\033[1;31m{0}\033[m" is not in ' +
                                   '"nvchecker.ini"').format(package))

    @skip("37 packages violating this")
    def test_folders_in_nvchecker(self):
        packagesfolder = SUBFOLDER
        if not git_isdir(packagesfolder):
            packagesfolder = '.'
        for package in git_listdir(packagesfolder):
            if not git_isdir(pkgpath(package)):
                continue
            if package[0] == '.':
                continue
            with self.subTest(package=package):
                self.assertIn(package, self.config,
                              msg=('package "\033[1;31m{0}\033[m" is not in ' +
                                   '"nvchecker.ini"').format(package))


def run_test(testcase, msg):
    output = StringIO()
    suite = TestLoader().loadTestsFromTestCase(testcase)
    runner = TextTestRunner(output, verbosity=0)
    results = runner.run(suite)
    if not results.wasSuccessful():
        print(output.getvalue())
        print(msg.format(len(results.failures)))
        sys.exit(1)


if __name__ == '__main__':
    git_write_tree_index()
    DIRS, FILES = git_ls_tree()
    run_test(NvcheckerSyntaxTest,
             msg='\033[1;31mThere are fatal error inside repo, ' +
                 'blocking git commit. Please fix the errors and commit ' +
                 'again\033[m')
    run_test(ConfigSectionTest,
             msg=('\033[1;31mThere are {0} error(s) inside repo, ' +
                  'blocking git commit. Please fix the errors and commit ' +
                  'again\033[m'))
