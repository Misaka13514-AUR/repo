diff --git a/main.go b/main.go
index 7f8cfce..ce5a292 100644
--- a/main.go
+++ b/main.go
@@ -3,24 +3,16 @@ package main
 import (
 	"flag"
 	"fmt"
-	"io/ioutil"
-	"net/http"
-	"os"
-	"runtime"
 	"time"
 
 	"CloudflareSpeedTest/task"
 	"CloudflareSpeedTest/utils"
 )
 
-var (
-	version, versionNew string
-)
 
 func init() {
-	var printVersion bool
 	var help = `
-CloudflareSpeedTest ` + version + `
+CloudflareSpeedTest 
 测试 Cloudflare CDN 所有 IP 的延迟和速度，获取最快 IP (IPv4+IPv6)！
 https://github.com/XIU2/CloudflareSpeedTest
 
@@ -46,7 +38,7 @@ https://github.com/XIU2/CloudflareSpeedTest
     -p 10
         显示结果数量；测速后直接显示指定数量的结果，为 0 时不显示结果直接退出；(默认 10 个)
     -f ip.txt
-        IP段数据文件；如路径含有空格请加上引号；支持其他 CDN IP段；(默认 ip.txt)
+        手动指定IP段数据文件；支持其他 CDN IP段；(默认为程序预置ip段) 
     -o result.csv
         写入结果文件；如路径含有空格请加上引号；值为空时不写入文件 [-o ""]；(默认 result.csv)
     -dd
@@ -55,8 +47,6 @@ https://github.com/XIU2/CloudflareSpeedTest
         IPv6测速模式；确保 IP 段数据文件内只包含 IPv6 IP段，软件不支持同时测速 IPv4+IPv6；(默认 IPv4)
     -allip
         测速全部的IP；对 IP 段中的每个 IP (仅支持 IPv4) 进行测速；(默认 每个 IP 段随机测速一个 IP)
-    -v
-        打印程序版本+检查版本更新
     -h
         打印帮助说明
 `
@@ -72,11 +62,10 @@ https://github.com/XIU2/CloudflareSpeedTest
 	flag.BoolVar(&task.Disable, "dd", false, "禁用下载测速")
 	flag.BoolVar(&task.IPv6, "ipv6", false, "启用IPv6")
 	flag.BoolVar(&task.TestAll, "allip", false, "测速全部 IP")
-	flag.StringVar(&task.IPFile, "f", "ip.txt", "IP 数据文件")
+	flag.StringVar(&task.IPFile, "f", "/usr/share/cloudflarespeedtest/ip.txt", "IP 数据文件")
 	flag.Float64Var(&task.MinSpeed, "sl", 0, "下载速度下限")
 	flag.IntVar(&utils.PrintNum, "p", 10, "显示结果数量")
 	flag.StringVar(&utils.Output, "o", "result.csv", "输出结果文件")
-	flag.BoolVar(&printVersion, "v", false, "打印程序版本")
 	flag.Usage = func() { fmt.Print(help) }
 	flag.Parse()
 
@@ -87,24 +76,12 @@ https://github.com/XIU2/CloudflareSpeedTest
 	utils.InputMinDelay = time.Duration(minDelay) * time.Millisecond
 	task.Timeout = time.Duration(downloadTime) * time.Second
 
-	if printVersion {
-		println(version)
-		fmt.Println("检查版本更新中...")
-		checkUpdate()
-		if versionNew != "" {
-			fmt.Printf("*** 发现新版本 [%s]！请前往 [https://github.com/XIU2/CloudflareSpeedTest] 更新！ ***", versionNew)
-		} else {
-			fmt.Println("当前为最新版本 [" + version + "]！")
-		}
-		os.Exit(0)
-	}
 }
 
 func main() {
-	go checkUpdate()    // 检查版本更新
 	task.InitRandSeed() // 置随机数种子
 
-	fmt.Printf("# XIU2/CloudflareSpeedTest %s \n\n", version)
+	fmt.Printf("# XIU2/CloudflareSpeedTest  \n\n")
 
 	// 开始延迟测速
 	pingData := task.NewPing().Run().FilterDelay()
@@ -113,9 +90,6 @@ func main() {
 	utils.ExportCsv(speedData)
 	speedData.Print(task.IPv6)
 
-	if versionNew != "" {
-		fmt.Printf("\n*** 发现新版本 [%s]！请前往 [https://github.com/XIU2/CloudflareSpeedTest] 更新！ ***\n", versionNew)
-	}
 	endPrint()
 }
 
@@ -123,29 +97,6 @@ func endPrint() {
 	if utils.NoPrintResult() {
 		return
 	}
-	if runtime.GOOS == "windows" { // 如果是 Windows 系统，则需要按下 回车键 或 Ctrl+C 退出（避免通过双击运行时，测速完毕后直接关闭）
-		fmt.Printf("按下 回车键 或 Ctrl+C 退出。")
-		var pause int
-		fmt.Scanln(&pause)
-	}
 }
 
-// 检查更新
-func checkUpdate() {
-	timeout := 10 * time.Second
-	client := http.Client{Timeout: timeout}
-	res, err := client.Get("https://api.xiu2.xyz/ver/cloudflarespeedtest.txt")
-	if err != nil {
-		return
-	}
-	// 读取资源数据 body: []byte
-	body, err := ioutil.ReadAll(res.Body)
-	if err != nil {
-		return
-	}
-	// 关闭资源流
-	defer res.Body.Close()
-	if string(body) != version {
-		versionNew = string(body)
-	}
-}
+
